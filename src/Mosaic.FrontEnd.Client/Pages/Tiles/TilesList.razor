@page "/Tiles"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using Mosaic.FrontEnd.Data
@inject MosaicService mosaicService
@inject ILogger<Index> Logger
@inject NavigationManager nav

<PageTitle>Tile Manager</PageTitle>

<h1>All Tiles</h1>
<div><a href="tiles/import">Import</a> | <a href="tiles/upload">Upload</a></div>
<div>
    <select @onchange=FilterChanged>
        <option selected="selected">All</option>
        <option>Internal</option>
        <option>Flickr</option>
    </select>
</div>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <p><em>EXCEPTION</em> @errorMessage</p>
}
else if (tiles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Tile ID</th>
                <th>Source</th>
                <th>Source ID</th>
                <th>Source Data</th>
                <td>AverageColor RGB</td>
                <th>Aspect</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tile in tiles)
            {
                <tr>
                    <td><a href="tiles/@tile.Id">@tile.Id</a></td>
                    <td>@tile.Source</td>
                    <td>@tile.SourceId</td>
                    <td>@tile.SourceData</td>
                    <td>
                        @tile.AverageColor?.Red.ToString("X2")
                        @tile.AverageColor?.Green.ToString("X2")
                        @tile.AverageColor?.Blue.ToString("X2")
                    </td>
                    <td>@tile.Aspect?.ToString("N1")</td>
                </tr>
            }
        </tbody>
    </table>
}

<div>
    <button disabled=@(this.Page <= 1) @onclick="OnClickPrev">Prev</button>
    <text>|</text>
    Page @this.Page
    <text>|</text>
    <button disabled=@(this.tiles?.Count != PageSize) @onclick="OnClickNext">Next</button>

</div>

@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public int Page { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public int PageSize { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public string? TileSourceFilter { get; set; }

    private List<TileReadDto>? tiles;
    private string? errorMessage = null;

    public override async Task SetParametersAsync(ParameterView parameterValues)
    {
        await base.SetParametersAsync(parameterValues);

        if (PageSize <= 5) PageSize = 15;
        if (Page <= 0) Page = 1;

        try
        {
            await RefreshTileList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            SetError(ex);
        }
    }

    void SetError(Exception ex)
    {
        var e = ex;
        while (e != null)
        {
            errorMessage += e.ToString() + "<br />";
            e = e.InnerException;
        }
    }

    private async Task FilterChanged(ChangeEventArgs e)
    {
        string filter = e.Value!.ToString()!;

        if (filter == "All")
        {
            TileSourceFilter = null;
        }
        else
        {
            TileSourceFilter = filter;
        }

        Page = 1;
        await RefreshTileList();
    }

    private async Task RefreshTileList()
    {
        Console.WriteLine($"Fetching Page={Page} PageSize={PageSize} TileSource={TileSourceFilter}");
        tiles = new List<TileReadDto>(await mosaicService.GetTiles(Page, PageSize, TileSourceFilter));
    }

    private void OnClickNext()
    {
        nav.NavigateTo($"tiles?Page={Page + 1}&PageSize={PageSize}&TileSourceFilter={TileSourceFilter}");
    }

    private void OnClickPrev()
    {
        nav.NavigateTo($"tiles?Page={Page - 1}&PageSize={PageSize}&TileSourceFilter={TileSourceFilter}");
    }
}
