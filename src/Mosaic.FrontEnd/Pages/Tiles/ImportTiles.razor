@page "/tiles/import"
@using Mosaic.FrontEnd.Data
@using Mosaic.TilesApi
@using Mosaic.TileSources.Flickr
@using System.Collections.ObjectModel
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject TileService tileService
@inject ILogger<UploadTiles> Logger
@inject IConfiguration config;
@inject HttpClient httpClient;
@inject FlickrTileSource flickrClient;

<PageTitle>Tile Manager</PageTitle>
@if (!string.IsNullOrEmpty(message))
{
    <div>@message</div>
}
else
{
    <h1>Flickr</h1>
    <div>Import images from today's "interesting" feed on Flickr to be used as tiles for mosaics. Only images with specific Creative Commons licenses will be imported</div>
    <button @onclick="ImportInteresting">Import</button>
}

@code {
        string? message;

        private async Task ImportInteresting()
        {
            string apiKey = config["flickr:apiKey"];
            if (string.IsNullOrWhiteSpace(apiKey))
            {
                message = "flickr API key is not configured";
            }
            else
            {
                var data = await flickrClient.GetTodaysInteresting();
                foreach (var item in data)
                {
                    try
                    {
                        var newTile = new TileCreateDto()
                            {
                                Source = "flickr",
                                SourceId = item.Id,
                                SourceData = JsonSerializer.Serialize(item),
                            };

                        var result = await tileService.AddNewTile(newTile);
                        message = message + $"\nSuccessfully imported flickr id {item.Id} as tile {result.Id}";
                    }
                    catch (Exception ex)
                    {
                        if (ex.InnerException is HttpRequestException httpEx &&
                            httpEx.StatusCode == System.Net.HttpStatusCode.UnprocessableEntity)
                        {
                            Logger.LogWarning(ex, "failed to add flickr id {Id} to tiles because {Reason}", item.Id, httpEx.Message);
                        }
                        else
                        {
                            Logger.LogError(ex, "failed to add flickr id {Id} to tiles", item.Id);
                        }
                    }
                }
            }
        }
    }
