@page "/uploadtiles"
@using Mosaic.FrontEnd.Data
@using Mosaic.TilesApi.Models
@using System.Collections.ObjectModel
@inject TileService tileService
@inject ILogger<Tiles> Logger
@inject Dapr.Client.DaprClient dapr;

<PageTitle>Tile Manager</PageTitle>

<h1>Add Tile</h1>
<InputFile OnChange="@LoadFiles" multiple />

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p><em>EXCEPTION</em> @errorMessage</p>
}

@code {

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    private string? errorMessage = null;

    void SetError(Exception ex)
    {
        var e = ex;
        while (e != null)
        {
            errorMessage += e.ToString() + "<br />";
            e = e.InnerException;
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);

                var memoryStream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(memoryStream);
                var bytes = memoryStream.ToArray();
                //var metadata = new Dictionary<string, string>
                //    {
                //        { "blobName" , file.Name}
                //    };
                await tileService.AddNewTile(file.Name, bytes);

            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
                SetError(ex);
            }
        }

        isLoading = false;
    }
}
