@page "/tiles"
@using Mosaic.FrontEnd.Data
@using Mosaic.TilesApi.Models
@inject TileService tileService
@inject ILogger<Tiles> Logger

<PageTitle>Tile Manager</PageTitle>

<h1>Add Tile</h1>
<EditForm Model="@newTile" OnValidSubmit="@HandleValidSubmit">
    <InputText id="Source" @bind-Value="newTile.Source" />
    <InputText id="SourceId" @bind-Value="newTile.SourceId" />
    <button type="submit">Submit</button>
</EditForm>

<h1>Tile List</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p><em>EXCEPTION</em> @errorMessage</p>
}
else if (tiles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Tile ID</th>
                <th>Source</th>
                <th>Source ID</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tile in tiles)
            {
                <tr>
                    <td>@tile.Id</td>
                    <td>@tile.Source</td>
                    <td>@tile.SourceId</td>
                </tr>
            }
        </tbody>
    </table>
}
<br />

@code {
    private TileCreateDto newTile = new();
    private List<TileReadDto>? tiles;
    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await RefreshTileList();
        }
        catch (Exception ex)
        {
            var e = ex;
            while (e != null)
            {
                errorMessage += e.ToString() + "<br />";
                e = e.InnerException;
            }
        }
    }

    private async Task RefreshTileList()
    {
        tiles = new List<TileReadDto>(await tileService.GetAllTiles());
    }

    private async Task HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");

        // Process the valid form
        await tileService.AddNewTile(newTile);
        await RefreshTileList();
    }
}
